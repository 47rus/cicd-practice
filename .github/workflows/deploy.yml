name: Build and Deploy WordPress

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 'Determine Environment and Tag'
        id: det-env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_file=live.env" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose-live.yml" >> $GITHUB_OUTPUT
            echo "project_dir=wordpress-live" >> $GITHUB_OUTPUT
          else
            echo "env_file=staging.env" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose-staging.yml" >> $GITHUB_OUTPUT
            echo "project_dir=wordpress-staging" >> $GITHUB_OUTPUT
          fi
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 'Build and Push to Azure Container Registry'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/my-wordpress:${{ steps.det-env.outputs.tag }}

      - name: 'Deploy to Server using Manual SSH'
        run: |
          # Step 1: Create a temporary file for the SSH private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

          # Step 2: Define the script to run on the remote server
          # Note: We are using GITHUB_OUTPUT from the previous step as an environment variable
          DEPLOY_SCRIPT="
          cd ~/$PROJECT_DIR;
          echo 'Updating .env file with new image tag...';
          sed -i 's/^IMAGE_TAG=.*/IMAGE_TAG=$IMAGE_TAG/' $ENV_FILE;
          echo 'Pulling new image...';
          docker compose --env-file $ENV_FILE pull;
          echo 'Restarting services...';
          docker compose --env-file $ENV_FILE up -d --remove-orphans;
          echo 'Deployment complete!';
          "

          # Step 3: Execute the script on the remote server via SSH
          ssh -o StrictHostKeyChecking=no -i private_key \
            -e PROJECT_DIR=${{ steps.det-env.outputs.project_dir }} \
            -e ENV_FILE=${{ steps.det-env.outputs.env_file }} \
            -e IMAGE_TAG=${{ steps.det-env.outputs.tag }} \
            ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} \
            "$DEPLOY_SCRIPT"
