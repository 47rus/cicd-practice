name: Build and Deploy WordPress

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 'Determine Environment and Tag'
        id: det-env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_file=live.env" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose-live.yml" >> $GITHUB_OUTPUT
            echo "project_dir=wordpress-live" >> $GITHUB_OUTPUT
          else
            echo "env_file=staging.env" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose-staging.yml" >> $GITHUB_OUTPUT
            echo "project_dir=wordpress-staging" >> $GITHUB_OUTPUT
          fi
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 'Build and Push to Azure Container Registry'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/my-wordpress:${{ steps.det-env.outputs.tag }}

      - name: 'Deploy to Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Exit on error and print commands
            set -ex

            # Navigate to the correct project directory
            cd ~/${{ steps.det-env.outputs.project_dir }}

            # Load the secrets from the .env file into the shell's environment
            set -o allexport
            source ${{ steps.det-env.outputs.env_file }}
            set +o allexport

            # Manually set the IMAGE_TAG from the pipeline, overwriting the one from the file
            export IMAGE_TAG=${{ steps.det-env.outputs.tag }}

            # --- DYNAMICALLY CREATE THE COMPOSE FILE ---
            # This 'cat' command uses the shell variables we just exported
            # to write a new, final docker-compose.yml with all values hardcoded.
            echo "--- Creating final docker-compose file with resolved values ---"
            cat > final-compose.yml <<EOF
            version: '3.8'
            services:
              db-live:
                image: mysql:8.0
                container_name: wordpress-db-live
                restart: always
                volumes:
                  - wordpress_live_db_data:/var/lib/mysql
                environment:
                  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                  MYSQL_DATABASE: ${MYSQL_DATABASE}
                  MYSQL_USER: ${MYSQL_USER}
                  MYSQL_PASSWORD: ${MYSQL_PASSWORD}
              wordpress-live:
                image: ${ACR_LOGIN_SERVER}/my-wordpress:${IMAGE_TAG}
                container_name: wordpress-live
                restart: always
                volumes:
                  - wordpress_live_uploads:/var/www/html/wp-content/uploads
                environment:
                  WORDPRESS_DB_HOST: db-live:3306
                  WORDPRESS_DB_USER: ${MYSQL_USER}
                  WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
                  WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
                depends_on:
                  - db-live
            volumes:
              wordpress_live_db_data: {}
              wordpress_live_uploads: {}
            EOF
            
            # Use this new, final-compose.yml file for the deployment
            echo "--- Pulling and restarting services using final-compose.yml ---"
            docker compose -f final-compose.yml pull
            docker compose -f final-compose.yml up -d --remove-orphans

            echo "âœ… Deployment successful!"
