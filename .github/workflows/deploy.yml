name: Build and Deploy WordPress

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 'Determine Environment'
        id: det-env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "project_dir=wordpress-live" >> $GITHUB_OUTPUT
          else
            echo "project_dir=wordpress-staging" >> $GITHUB_OUTPUT
          fi
          
      - name: 'Build and Push to Azure Container Registry'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/my-wordpress:${{ github.sha }}

      - name: 'Deploy to Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex

            cd ~/${{ steps.det-env.outputs.project_dir }}

            # Dynamically create the final compose file with resolved values.
            # This avoids ALL variable substitution issues on the remote server.
            echo "--- Creating final, hardcoded docker-compose.yml ---"
            echo "version: '3.8'" > docker-compose-final.yml
            echo "services:" >> docker-compose-final.yml
            echo "  db:" >> docker-compose-final.yml
            echo "    image: mysql:8.0" >> docker-compose-final.yml
            echo "    container_name: ${{ steps.det-env.outputs.project_dir }}-db" >> docker-compose-final.yml
            echo "    restart: always" >> docker-compose-final.yml
            echo "    volumes:" >> docker-compose-final.yml
            echo "      - ${{ steps.det-env.outputs.project_dir }}_db_data:/var/lib/mysql" >> docker-compose-final.yml
            echo "    environment:" >> docker-compose-final.yml
            echo "      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}" >> docker-compose-final.yml
            echo "      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}" >> docker-compose-final.yml
            echo "      MYSQL_USER: ${{ secrets.MYSQL_USER }}" >> docker-compose-final.yml
            echo "      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}" >> docker-compose-final.yml
            echo "  wordpress:" >> docker-compose-final.yml
            echo "    image: ${{ secrets.ACR_LOGIN_SERVER }}/my-wordpress:${{ github.sha }}" >> docker-compose-final.yml
            echo "    container_name: ${{ steps.det-env.outputs.project_dir }}-app" >> docker-compose-final.yml
            echo "    restart: always" >> docker-compose-final.yml
            echo "    volumes:" >> docker-compose-final.yml
            echo "      - ${{ steps.det-env.outputs.project_dir }}_uploads:/var/www/html/wp-content/uploads" >> docker-compose-final.yml
            echo "    environment:" >> docker-compose-final.yml
            echo "      WORDPRESS_DB_HOST: db:3306" >> docker-compose-final.yml
            echo "      WORDPRESS_DB_USER: ${{ secrets.MYSQL_USER }}" >> docker-compose-final.yml
            echo "      WORDPRESS_DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}" >> docker-compose-final.yml
            echo "      WORDPRESS_DB_NAME: ${{ secrets.MYSQL_DATABASE }}" >> docker-compose-final.yml
            echo "    depends_on:" >> docker-compose-final.yml
            echo "      - db" >> docker-compose-final.yml
            echo "volumes:" >> docker-compose-final.yml
            echo "  ${{ steps.det-env.outputs.project_dir }}_db_data: {}" >> docker-compose-final.yml
            echo "  ${{ steps.det-env.outputs.project_dir }}_uploads: {}" >> docker-compose-final.yml
            
            # Login to ACR from the server
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

            # Run compose with the new, static file. There are no variables for it to fail on.
            echo "--- Pulling and restarting services ---"
            docker compose -f docker-compose-final.yml up -d --remove-orphans
            
            echo "âœ… Deployment successful!"