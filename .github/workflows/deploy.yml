name: Build, Test, and Deploy WordPress

# This file defines two independent triggers
on:
  # Trigger 1: Automatically run on a push to the 'develop' branch
  push:
    branches:
      - develop

  # Trigger 2: Allow manual runs from the GitHub Actions UI
  workflow_dispatch:
    # Define an input field for the manual trigger
    inputs:
      image_tag:
        description: 'The exact image tag to deploy to Live (e.g., the Git commit SHA)'
        required: true

jobs:
  # JOB 1: This job builds the image and deploys it to STAGING
  build_and_deploy_staging:
    # This job only runs when the trigger is a 'push' to the develop branch
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: 'Build and Push Docker Image'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # The image is tagged with the unique Git commit SHA
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/my-wordpress:${{ github.sha }}

      - name: 'Deploy to Staging Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex
            cd ~/wordpress-staging

            # Create the .env file with the correct secrets and the new image tag
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE_STAGING }}" > .env # Using new staging secrets
            echo "MYSQL_USER=${{ secrets.MYSQL_USER_STAGING }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD_STAGING }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD_STAGING }}" >> .env
            echo "ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}" >> .env
            echo "IMAGE_TAG=${{ github.sha }}" >> .env
            
            # Login to ACR from the server
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

            # Run docker compose using the staging config file
            docker-compose -f docker-compose-staging.yml up -d --remove-orphans

  # JOB 2: This job deploys an EXISTING image to LIVE
  deploy_live:
    # This job only runs when you trigger it manually via 'workflow_dispatch'
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: 'Deploy to Live Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex
            cd ~/wordpress-live

            # Create the .env file, using the image_tag that was MANUALLY provided when the job started
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" > .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}" >> .env
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> .env # <-- Uses the manual input
            
            # Login to ACR from the server
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

            # Run docker compose using the live config file
            docker-compose -f docker-compose-live.yml up -d --remove-orphans
