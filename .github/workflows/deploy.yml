name: Build and Deploy WordPress

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Login to Azure Container Registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: 'Determine Environment'
        id: det-env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_file=live.env" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose-live.yml" >> $GITHUB_OUTPUT
            echo "project_dir=wordpress-live" >> $GITHUB_OUTPUT
          else
            echo "env_file=staging.env" >> $GITHUB_OUTPUT
            echo "compose_file=docker-compose-staging.yml" >> $GITHUB_OUTPUT
            echo "project_dir=wordpress-staging" >> $GITHUB_OUTPUT
          fi
          
      - name: 'Build and Push to Azure Container Registry'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/my-wordpress:${{ github.sha }}

      - name: 'Deploy to Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex # Exit on error and print commands

            cd ~/${{ steps.det-env.outputs.project_dir }}

            # --- THE CORRECTED FIX ---
            # Create the .env file line-by-line to ensure variables are expanded correctly.
            echo "--- Creating fresh, corrected .env file on the server ---"
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" > ${{ steps.det-env.outputs.env_file }}
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> ${{ steps.det-env.outputs.env_file }}
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> ${{ steps.det-env.outputs.env_file }}
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> ${{ steps.det-env.outputs.env_file }}
            echo "ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}" >> ${{ steps.det-env.outputs.env_file }}
            echo "IMAGE_TAG=${{ github.sha }}" >> ${{ steps.det-env.outputs.env_file }}
            
            # Login to ACR from the server
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

            # Run docker compose using the auto-generated .env file
            echo "--- Pulling and restarting services ---"
            docker compose -f ${{ steps.det-env.outputs.compose_file }} --env-file ${{ steps.det-env.outputs.env_file }} up -d --remove-orphans
            
            echo "âœ… Deployment successful!"
